function serverRequestStart(id){
	$(id).find(".k-grid-content").append('<div class="k-loading-mask" style="width: 100%; height: 100%; top: 0px; left: 0px;"><span class="k-loading-text">Loading...</span><div class="k-loading-image"></div><div class="k-loading-color"></div></div>');
}

function serverRequestEnd(id){
	$(id).find(".k-loading-mask").remove();
}

function loadingStart(){
	$("#load").css('display', 'block');
	$(".content").css('display', 'none');
	$(".main-header").css('opacity', '0.1');
	$(".main-sidebar").css('opacity', '0.1');
	$(".content-header").css('opacity', '0.1');

}


function loadingEnd(){
	$("#load").css('display', 'none');
	$(".content").css('display', 'block');
	$(".main-header").css('opacity', '1');
	$(".main-sidebar").css('opacity', '1');
	$(".content-header").css('opacity', '1');

}

var plaasApp = angular.module('plaasApp',["kendo.directives", "angularFileUpload"]);

plaasApp.factory('WebService',function($http){
	return {
		get:function(url){
			return $http({
				method:"POST",
				url : SITE_URL+url,
				headers:{'X-Requested-With':'XMLHttpRequest',
						 'Content-Type': 'application/x-www-form-urlencoded'},
			});
		},
		post:function(url,data){
			return $http({
				method:"POST",
				url : SITE_URL+url,
				headers:{'X-Requested-With':'XMLHttpRequest',
						 'Content-Type': 'application/x-www-form-urlencoded'},
				data:$.param(data)
			});
		}
		
	};
});

plaasApp.controller('userPermission', ['$scope', function($scope) {
  $scope.greeting = 'Hola!';
}]);

plaasApp.controller('Notify', ['$scope','WebService','$interval', function($scope,WebService,$interval) {
  $scope.countmsg = 0;
  $scope.countNotification=0;
  $scope.limit = 5;
  $scope.offset = 0;
  $scope.notifications = [];

  $scope.$on('loadSubscriberBalance',function(event,data){
	  if(data.user_type == "Subscriber"){
		  var http = WebService.post('profile/ajax-get-balance',{token:data.token});
		  http.then(function(response){
			  var data = response.data;
			  if(data.status == 200){
				  $scope.balance = data.balance;
			  }
		  });
	  }
  });

  var loadNotification = $scope.loadNotification = function(){
  	
  	var http = WebService.get('notification/ajax_load_popup_notifications');
 	http.then(function(response){
	  	var data = response.data;
	  	if(data.status==200){
	  		$scope.notifications = data.messages;
	  		$scope.countNotification = data.count;
	  		$scope.limit = data.count;
	  	}
    });
  };

  loadNotification();
  $interval(loadNotification,6000);
  
}]);

plaasApp.controller('updateProgram', ['$scope', '$http', function($scope,$http){
	$scope.lcnOver = true;
	var track = false;
	// $scope.lcn = 0;
	$scope.$watch('lcn', function(newValue, oldValue){
		if(newValue != undefined){
			if(newValue.length >= 4){
				track = true;
				$scope.lcn = oldValue;
			}
			$scope.lcnOver = track;
			if(newValue.length < 4){
				track = false;
			}
		}	
	}) 
}]);

plaasApp.controller('program', ['$scope', '$http', 'FileUploader','WebService', function($scope,$http, FileUploader,WebService){

	$scope.lcnOver = true;
	$scope.permissions = [];
	$scope.lcn =0;
	var track = false;
	$scope.unassigned_programs = unassigned_programs;
	$scope.$watch('lcn', function(newValue, oldValue){
		if(newValue != undefined){
			if(newValue.length >= 4){
				track = true;
				$scope.lcn = oldValue;
			}
			$scope.lcnOver = track;
			if(newValue.length < 4){
				track = false;
			}
		}	
	}); 

	loadingStart();
	$scope.addFrom_ViewFromFlag = false;

	$scope.addFrom_ViewFromFlagtoggleState = function(){
		if ($scope.addFrom_ViewFromFlag){
			$scope.addFrom_ViewFromFlag = false;
			$scope.advancedOptions = false;
			$scope.advancedOptionsConfirmed = 0
			$scope.advancedOptionsTitle = "Show Advanced Options";
		}else{
			$scope.addFrom_ViewFromFlag = true;
			$scope.advancedOptions = false;
			$scope.advancedOptionsConfirmed = 0;
			$scope.advancedOptionsTitle = "Show Advanced Options";
		}
	}

	$scope.advancedOptions = false;
	$scope.advancedOptionsTitle = "Show Advanced Options";
	$scope.advancedOptionsChange = function(){
		if($scope.advancedOptionsConfirmed == 1){
			$scope.advancedOptions = true;
			$scope.advancedOptionsTitle = "Show Advanced Options"
		}else{
			$scope.advancedOptions = false;
			$scope.advancedOptionsTitle = "Hide Advanced Options"
		}
	}

	$scope.importProgram = true; 


	$scope.importTemplate = function(){
		$scope.importProgram = false;	
	}

	$scope.uploadViewBack = function(){
		$scope.importProgram = true;	
	}

	// File upload section
	var uploader = $scope.uploader = new FileUploader({
        url: 'program/upload_file'
    });

    // FILTERS

    uploader.filters.push({
        name: 'customFilter',
        fn: function(item /*{File|FileLikeObject}*/, options) {
            return this.queue.length < 10;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
        // console.info('onWhenAddingFileFailed', item, filter, options);
    };
    uploader.onAfterAddingFile = function(fileItem) {
        // console.info('onAfterAddingFile', fileItem);
    };
    uploader.onAfterAddingAll = function(addedFileItems) {
        // console.info('onAfterAddingAll', addedFileItems);
    };
    uploader.onBeforeUploadItem = function(item) {
    	$scope.warning_messages = "Please Don't refresh your browser.";
        // console.info('onBeforeUploadItem', item);
    };
    uploader.onProgressItem = function(fileItem, progress) {
		
        // console.info('onProgressItem', fileItem, progress);
    };
    uploader.onProgressAll = function(progress) {
    	
        // console.info('onProgressAll', progress);
    };
    uploader.onSuccessItem = function(fileItem, response, status, headers) {
    	window.open("program",'_self',false);
    	// $scope.uploadReasult(response);
    };
    uploader.onErrorItem = function(fileItem, response, status, headers) {
        // console.info('onErrorItem', fileItem, response, status, headers);
    };
    uploader.onCancelItem = function(fileItem, response, status, headers) {
        // console.info('onCancelItem', fileItem, response, status, headers);
    };
    uploader.onCompleteItem = function(fileItem, response, status, headers) {
        // console.info('onCompleteItem', fileItem, response, status, headers);
    };
    uploader.onCompleteAll = function() {
        // console.info('onCompleteAll');
    };

    // console.info('uploader', uploader);


	// $scope.gridSetUp = function(dataSet){

	// 	var dynamicColmons = [];
	// 	angular.forEach(dataSet[0], function(value, key) {
	// 		if(key != "id"  && key.substring(0, 1) != "_"){
	//   			var tempObj = {};
	// 			tempObj.field = key;
	// 			var tempTitle = key.split("_");
	// 			if(tempTitle[1] == "name"){
	// 				tempObj.width = "200px";
	// 			}else{
	// 				tempObj.width = "150px";
	// 			}
	// 			tempTitle = tempTitle.join(" ");
	// 			tempObj.title = tempTitle.toUpperCase();
	// 			this.push(tempObj);
	// 		}
	// 	}, dynamicColmons);
	// 	// add edit Colmon.
	// 	dynamicColmons.push({ field: "id", title: "Action", template: '<a href="program/edit_view/#=data.id#"><button class="btn btn-success btn-xs"><i class="fa fa-pencil-square-o fa-lg"></i></button></a>'});
		$scope.mainGridOptions = {
			toolbar: [
							{text:"",template: '<button class="k-button" ng-if="permissions.create_permission == \'1\'" ng-click="importTemplate()"><span class="k-icon k-i-excel"></span> Bulk Import</button>'},
							{text:"",template: '<button class="k-button" ng-click="exportPrograms()"><span class="k-icon k-i-excel"></span> Export Programs</button>'}, 
							{text:"",template: '<button class="k-button" ng-click="exportExlsTemp()"><span class="k-icon k-i-excel"></span> Download Template</button>'},
							{text:"",template: '<button class="k-button" ng-click="exportACTable()"><span class="k-icon k-i-excel"></span> Export AC Table</button>'}
							
							],
							
            /*excel: {
                fileName: "Programs List.xlsx",
                proxyURL: "//demos.telerik.com/kendo-ui/service/export",
                filterable: true,
                allPages: true,
            },*/
	         dataSource: {
	         	schema: {
		            data: "data",
		            total: "total"
		        },
		        transport: {
		            read: {
		                url: "program/programView",
		                dataType: "json",
					}
				},
				
                pageSize: 5,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
	        filterable: {
				extra: false,
				operators: {
					string: {
						startswith: "Starts with",
						eq: "Is equal to",

					}
				}
            },
            
	        sortable: true,
	        pageable: true,
	        scrollable: true,
	        resizable: true,
	        dataBound: gridDataBound,

	      /*  dataBound: function (e) {
			    var grid = e.sender;
			    if (grid.dataSource._data.length <= 0) {
			        var colCount = grid.columns.length;
			        $(e.sender.wrapper)
			            .find('tbody')
			            .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data">Sorry, no data found</td></tr>');
			    }
			    $('a[data-toggle="tooltip"]').tooltip();
			},*/

		    columns:[
		    		{field: "id", title: "ID", width: "100px", filterable: false},
		    		{field: "program_name", title: "PROGRAM NAME",width:"auto"},

		    		{field: "pp_id", title: "Packages",width:"auto",filterable: false},
		    		{field: "program_service_id", title: "Service ID" , width: "110px",filterable: false},
		    		{field: "lcn", title: "LCN" , width: "90px",filterable: false},
		    		{field: "pp_id", title: "Status" , width: "100px",filterable:false,template:'# if(data.pp_id>0) {# <span class="label label-success">Assigned</span> #} else {# <span class="label label-warning">Not assigned</span> #}#'},
		    		{field: "id", width: "200px", title: "Action", template: '<a href="'+SITE_URL + 'program/' + 'view/#=data.id#" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="left" title="View"><i class="fa fa-search"></i></a>'+
		    		' <a ng-if="permissions.edit_permission==\'1\'" href="'+SITE_URL + 'program/' + 'edit_view/#=data.id#" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="left" title="Edit"><i class="fa fa-pencil"></i></a> '+
		    		'# if(data.pp_id=="0"){#<a ng-if="permissions.delete_permission==\'1\'" ng-click="delete(#=data.id#)" class="btn btn-danger btn-xs" data-toggle="tooltip" data-placement="left" title="Delete"><i class="fa fa-trash"></i></a>#}#', filterable: false}
		    	]
	    };
	// }

	$scope.closeAlert = function(){
		$scope.warning_messages = '';
	};

	$scope.delete = function(i)
	{
		$scope.delete_item = i;
	};

	$scope.confirm_delete = function()
	{
		var location = SITE_URL + 'program/program_delete/'+$scope.delete_item;
		window.location = location;
	};

	$scope.cancel_delete = function()
	{
		$scope.delete_item = 0;
	};

	$scope.exportPrograms = function(){
		window.open("program/export-programs",'_self',false);
	}

	$scope.exportExlsTemp = function() {
		window.open("/public/downloads/new-program-template.xlsx");
	}

	$scope.exportACTable = function() {
		//loadingStart()
		window.location = SITE_URL + 'program/export_ac_table';
		/*loadingStart();
		$http({method: 'GET', url: SITE_URL + 'program/export_ac_table'}).then(
			function successCallback(response) {
				loadingEnd();
				if(response.data.response == "200"){
					window.open("/plaas_sms/public/downloads/testing.txt");
				}
		  	}, 
		  	function errorCallback(response) {
		    	loadingEnd()
	  		}
	  	);*/
	}

	var loadPermissions = function(){
		var http = WebService.get('program/ajax_get_permissions');
		http.then(function(response){
			var data = response.data;
			if(data.status == 200){
				$scope.permissions = data.permissions;
			}
		});
	};

	loadPermissions();

	loadingEnd();

	// loadingStart();
	// $http({method: 'GET', url: SITE_URL + 'program/programView'}).then(
	// 	function successCallback(response) {
	// 		$scope.gridSetUp(response.data);
	// 		loadingEnd();
	//   	}, 
	//   	function errorCallback(response) {
 //  		}
 //  	);



}]);

/*plaasApp.controller('package', ['$scope', function($scope){
	$scope.addFrom_ViewFromFlag = false;
	$scope.addFrom_ViewFromFlagtoggleState = function(){
		if ($scope.addFrom_ViewFromFlag){
			$scope.addFrom_ViewFromFlag = false;
		}else{
			$scope.addFrom_ViewFromFlag = true;
		}
	}
	
}]);*/


function reloadGrid(id, url){
	$(id).data("kendoGrid").dataSource.read();
	$(id).data("kendoGrid").refresh();
}

function reloadGridWithNewData(id, url){
	$(id).data("kendoGrid").dataSource.options.transport.read.url = url;
	reloadGrid(id)
}


function gridDataBound(e) {
    var grid = e.sender;
    if (grid.dataSource._data.length <= 0) {
        var colCount = grid.columns.length;
        $(e.sender.wrapper)
            .find('tbody')
            .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data">Sorry, no data found</td></tr>');
    }
    $('a[data-toggle="tooltip"]').tooltip();
};


